{
  "version": 3,
  "sources": ["../src/index.js", "../src/RSCX.js"],
  "sourcesContent": ["import root from \"app-root-path\";\r\nimport { RSCX } from \"./RSCX.js\";\r\nimport chokidar from \"chokidar\";\r\n\r\n\r\nexport const RSCbuild = ({live, version, entries, srcDir=\"src\", distDir=\"dist\"})=>{\r\n    srcDir = root.path + \"/\" + srcDir;\r\n    distDir = root.path + \"/\" + distDir;\r\n\r\n    const build = _=>{\r\n        console.log(`${(new Date()).toLocaleTimeString()} - RSC rebuild`);\r\n        entries.forEach(pathname=>{\r\n            const file = RSCX.create(srcDir + \"/\" + pathname);\r\n            try {\r\n                file.export( distDir + \"/\" + file.filename + \" \" + version, { version });\r\n            } catch(err) {\r\n                console.warn(err.message);\r\n            }\r\n        });\r\n        \r\n    }\r\n\r\n    if (!live) { return build(); }\r\n    \r\n    let _int;\r\n    chokidar.watch(srcDir).on('all', _ => {\r\n        clearTimeout(_int);\r\n        _int = setTimeout(build, 500);\r\n    });\r\n    \r\n\r\n}\r\n\r\nexport default RSCbuild;\r\n\r\n\r\n\r\n", "import fse from \"fs-extra\";\r\nimport path from \"path\";\r\n\r\nexport class RSCX {\r\n\r\n    static escapeScript(script) {\r\n        return JSON.stringify(script).slice(1, -1).replace(/\\$/g, '\\\\$');\r\n    }\r\n\r\n    static create(pathname) {\r\n        return new RSCX(pathname);\r\n    }\r\n\r\n    constructor(pathname) {\r\n        pathname = path.normalize(pathname);\r\n        const parsed = path.parse(pathname);\r\n\r\n        const enumerable = true;\r\n        Object.defineProperties(this, {\r\n            pathname:{ enumerable, value:pathname },\r\n            dirname:{ enumerable, value:parsed.dir },\r\n            filename:{ enumerable, value:parsed.name },\r\n            extension:{ enumerable, value:parsed.ext },\r\n        });\r\n        \r\n    }\r\n\r\n    msg(msg, detail) {\r\n        return `File ${this.pathname}: ${msg}` + (!detail ? \"\" : `\\n${detail}`);\r\n    }\r\n\r\n    read() {\r\n        try { return fse.readFileSync(this.pathname, 'utf8'); }\r\n        catch (err) { throw new Error(this.msg(\"read failed\", err.message)); }\r\n    }\r\n\r\n    parseJSON(json) {\r\n        if (!json) { return {}; }\r\n        try { return JSON.parse(json); }\r\n        catch (err) { throw new Error(this.msg(\"json malformated\", json)); }\r\n    }\r\n\r\n    injectVars(regex, raw, vars={}) {\r\n        return raw.replace(regex, (match, v) =>{\r\n            if (vars.hasOwnProperty(v)) { return vars[v]; }\r\n            throw new Error(this.msg(\"missing variable\", v));\r\n        });\r\n    }\r\n\r\n    resolveLinks(regex, raw, vars={}, escape=false) {\r\n        return raw.replace(regex, (match, pathname, json) => {\r\n            const raw = RSCX.create(this.dirname + \"/\" + pathname).parse({...vars, ...this.parseJSON(json)});\r\n            return escape ? RSCX.escapeScript(raw) : raw;\r\n        });\r\n    }\r\n\r\n    parse(vars={}) {\r\n        let raw = this.read();\r\n        raw = this.injectVars(/\\${([^}]+)}/g, raw, vars);\r\n        raw = this.resolveLinks(/%%([^%\\s]+)(?:\\s+({.*}))?%%/g, raw, vars, false);\r\n        return this.resolveLinks(/##([^#\\s]+)(?:\\s+({.*}))?##/g, raw, vars, true);\r\n    }\r\n\r\n    export(pathname, vars={}) {\r\n        return fse.outputFileSync(path.normalize(pathname + \".rsc\"), this.parse(vars));\r\n    }\r\n\r\n}"],
  "mappings": "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",
  "names": ["raw"]
}
