{
  "version": 3,
  "sources": ["../../node_modules/@randajan/simple-lib/src/logger.js", "../../node_modules/@randajan/simple-lib/src/info/index.js", "../../node_modules/@randajan/simple-lib/src/node/index.js", "../../src/index.js", "../../src/RSCX.js"],
  "sourcesContent": ["import chalkNative from \"chalk\";\r\n\r\nconst chalkProps = Object.getOwnPropertyNames(Object.getPrototypeOf(chalkNative)).filter(v=>v!==\"constructor\");\r\n\r\nclass Logger extends Function {\r\n    constructor(formater, chalkInit) {\r\n        super();\r\n        const chalk = chalkInit||chalkNative;\r\n\r\n        const log = (...msgs)=>{ console.log(chalk(formater(msgs))); }\r\n        const self = Object.setPrototypeOf(log.bind(), new.target.prototype);\r\n\r\n        for (const prop of chalkProps) {\r\n            Object.defineProperty(self, prop, { get: _=>new Logger(formater, chalk[prop]), enumerable:false });\r\n        }\r\n        \r\n        return self;\r\n    }\r\n}\r\n\r\nexport const logger = (...prefixes)=>{\r\n    const now = _=>(new Date()).toLocaleTimeString(\"cs-CZ\");\r\n    prefixes = prefixes.filter(v=>!!v).join(\" \");\r\n\r\n    return new Logger(msgs=>`${prefixes} | ${now()} | ${msgs.join(\" \")}`);\r\n}", "const enumerable = true;\r\nconst lockObject = o=>{\r\n    if (typeof o !== \"object\") { return o; }\r\n\r\n    const r = {};\r\n    for (const i in o) {\r\n        const descriptor = { enumerable };\r\n        let val = o[i];\r\n        if (val instanceof Array) { descriptor.get = _=>[...val]; }\r\n        else { descriptor.value = lockObject(val); }\r\n        Object.defineProperty(r, i, descriptor);\r\n    }\r\n\r\n    return r;\r\n}\r\n\r\nexport const info = lockObject(__slib_info);\r\nexport default info;", "import { parentPort } from \"worker_threads\";\r\nimport { info } from \"../info\";\r\nimport { logger } from \"../logger\";\r\n\r\nexport default info;\r\n\r\nexport const log = logger(info.name, info.version, info.env);\r\n\r\nexport {\r\n    info,\r\n}\r\n\r\nparentPort.on(\"message\", msg=>{\r\n    if (msg===\"shutdown\") { process.exit(0); }\r\n});\r\n\r\nprocess.on('uncaughtException', e=>{\r\n  console.log(e.stack);\r\n});", "import root from \"app-root-path\";\r\nimport { RSCX } from \"./RSCX.js\";\r\nimport chokidar from \"chokidar\";\r\n\r\n\r\nexport const RSCbuild = ({live, version, entries, srcDir=\"src\", distDir=\"dist\"})=>{\r\n    srcDir = root.path + \"/\" + srcDir;\r\n    distDir = root.path + \"/\" + distDir;\r\n\r\n    const build = _=>{\r\n        console.log(`${(new Date()).toLocaleTimeString()} - RSC rebuild`);\r\n        entries.forEach(pathname=>{\r\n            const file = RSCX.create(srcDir + \"/\" + pathname);\r\n            try {\r\n                file.export( distDir + \"/\" + file.filename + \" \" + version, { version });\r\n            } catch(err) {\r\n                console.warn(err.message);\r\n            }\r\n        });\r\n        \r\n    }\r\n\r\n    if (!live) { return build(); }\r\n    \r\n    let _int;\r\n    chokidar.watch(srcDir).on('all', _ => {\r\n        clearTimeout(_int);\r\n        _int = setTimeout(build, 500);\r\n    });\r\n    \r\n\r\n}\r\n\r\nexport default RSCbuild;\r\n\r\n\r\n\r\n", "import fse from \"fs-extra\";\r\nimport path from \"path\";\r\n\r\nexport class RSCX {\r\n\r\n    static escapeScript(script) {\r\n        return JSON.stringify(script).slice(1, -1).replace(/\\$/g, '\\\\$');\r\n    }\r\n\r\n    static create(pathname) {\r\n        return new RSCX(pathname);\r\n    }\r\n\r\n    constructor(pathname) {\r\n        pathname = path.normalize(pathname);\r\n        const parsed = path.parse(pathname);\r\n\r\n        const enumerable = true;\r\n        Object.defineProperties(this, {\r\n            pathname:{ enumerable, value:pathname },\r\n            dirname:{ enumerable, value:parsed.dir },\r\n            filename:{ enumerable, value:parsed.name },\r\n            extension:{ enumerable, value:parsed.ext },\r\n        });\r\n        \r\n    }\r\n\r\n    msg(msg, detail) {\r\n        return `File ${this.pathname}: ${msg}` + (!detail ? \"\" : `\\n${detail}`);\r\n    }\r\n\r\n    read() {\r\n        try { return fse.readFileSync(this.pathname, 'utf8'); }\r\n        catch (err) { throw new Error(this.msg(\"read failed\", err.message)); }\r\n    }\r\n\r\n    parseJSON(json) {\r\n        if (!json) { return {}; }\r\n        try { return JSON.parse(json); }\r\n        catch (err) { throw new Error(this.msg(\"json malformated\", json)); }\r\n    }\r\n\r\n    injectVars(regex, raw, vars={}) {\r\n        return raw.replace(regex, (match, v) =>{\r\n            if (vars.hasOwnProperty(v)) { return vars[v]; }\r\n            throw new Error(this.msg(\"missing variable\", v));\r\n        });\r\n    }\r\n\r\n    resolveLinks(regex, raw, vars={}, escape=false) {\r\n        return raw.replace(regex, (match, pathname, json) => {\r\n            const raw = RSCX.create(this.dirname + \"/\" + pathname).parse({...vars, ...this.parseJSON(json)});\r\n            return escape ? RSCX.escapeScript(raw) : raw;\r\n        });\r\n    }\r\n\r\n    parse(vars={}) {\r\n        let raw = this.read();\r\n        raw = this.injectVars(/\\${([^}]+)}/g, raw, vars);\r\n        raw = this.resolveLinks(/%%([^%\\s]+)(?:\\s+({.*}))?%%/g, raw, vars, false);\r\n        return this.resolveLinks(/##([^#\\s]+)(?:\\s+({.*}))?##/g, raw, vars, true);\r\n    }\r\n\r\n    export(pathname, vars={}) {\r\n        return fse.outputFileSync(path.normalize(pathname + \".rsc\"), this.parse(vars));\r\n    }\r\n\r\n}"],
  "mappings": "kRAAA,OAAAA,MAAA,QAEA,IAAMC,EAAa,OAAO,oBAAoB,OAAO,eAAeD,CAAW,CAAC,EAAE,OAAOE,GAAGA,IAAI,aAAa,EAE7GC,EAAA,cAAqB,QAAS,CAC1B,YAAYC,EAAUC,EAAW,CAC7B,MAAM,EACN,IAAMC,EAAQD,GAAWL,EAGnBO,EAAO,OAAO,gBADR,IAAIC,IAAO,CAAE,QAAQ,IAAIF,EAAMF,EAASI,CAAI,CAAC,CAAC,CAAG,GACtB,KAAK,EAAG,WAAW,SAAS,EAEnE,QAAWC,KAAQR,EACf,OAAO,eAAeM,EAAME,EAAM,CAAE,IAAKC,GAAG,IAAIP,EAAOC,EAAUE,EAAMG,EAAK,EAAG,WAAW,EAAM,CAAC,EAGrG,OAAOF,CACX,CACJ,EAEaI,EAAS,IAAIC,IAAW,CACjC,IAAMC,EAAMH,GAAI,IAAI,KAAK,EAAG,mBAAmB,OAAO,EACtD,OAAAE,EAAWA,EAAS,OAAOV,GAAG,CAAC,CAACA,CAAC,EAAE,KAAK,GAAG,EAEpC,IAAIC,EAAOK,GAAM,GAAGI,OAAcC,EAAI,OAAOL,EAAK,KAAK,GAAG,GAAG,CACxE,ECzBA,IAAMM,EAAa,GACbC,EAAaC,GAAG,CAClB,GAAI,OAAOA,GAAM,SAAY,OAAOA,EAEpC,IAAMC,EAAI,CAAC,EACX,QAAWC,KAAKF,EAAG,CACf,IAAMG,EAAa,CAAE,WAAAL,CAAW,EAC5BM,EAAMJ,EAAEE,GACRE,aAAe,MAASD,EAAW,IAAME,GAAG,CAAC,GAAGD,CAAG,EAChDD,EAAW,MAAQJ,EAAWK,CAAG,EACxC,OAAO,eAAeH,EAAGC,EAAGC,CAAU,CAC1C,CAEA,OAAOF,CACX,EAEaK,EAAOP,EAAWQ,CAAW,EChB1C,OAAA,cAAAC,MAAA,iBAMO,IAAMC,EAAMC,EAAOC,EAAK,KAAMA,EAAK,QAASA,EAAK,GAAG,EAM3DC,EAAW,GAAG,UAAWC,GAAK,CACtBA,IAAM,YAAc,QAAQ,KAAK,CAAC,CAC1C,CAAC,EAED,QAAQ,GAAG,oBAAqB,GAAG,CACjC,QAAQ,IAAI,EAAE,KAAK,CACrB,CAAC,EClBD,OAAOC,MAAU,gBCAjB,OAAOC,MAAS,WAChB,OAAOC,MAAU,ODCjB,OAAOC,MAAc",
  "names": ["chalkNative", "chalkProps", "v", "Logger", "formater", "chalkInit", "chalk", "self", "msgs", "prop", "_", "logger", "prefixes", "now", "enumerable", "lockObject", "o", "r", "i", "descriptor", "val", "_", "info", "define_slib_info_default", "parentPort", "log", "logger", "info", "parentPort", "msg", "root", "fse", "path", "chokidar"]
}
